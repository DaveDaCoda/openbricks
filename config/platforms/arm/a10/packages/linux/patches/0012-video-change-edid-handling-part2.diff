diff --git a/drivers/video/sunxi/disp/dev_fb.c b/drivers/video/sunxi/disp/dev_fb.c
index 4a9c26c..58a45a7 100644
--- a/drivers/video/sunxi/disp/dev_fb.c
+++ b/drivers/video/sunxi/disp/dev_fb.c
@@ -1713,7 +1713,7 @@ const struct fb_videomode *hdmi_edid_received(unsigned char *edid, int block_cou
 	struct fb_event event;
 	struct fb_modelist *m, *n;
 	struct fb_videomode currMode, *dflt = NULL;
-	int i, vic;
+	int vic;
 	__u32 sel = 0;
 	__u32 block = 0;
 	LIST_HEAD(old_modelist);
@@ -1800,16 +1800,10 @@ const struct fb_videomode *hdmi_edid_received(unsigned char *edid, int block_cou
 		 * Determine default mode and vic support
 		 */
 		list_for_each_entry(m, &fbi->modelist, list) {
-			for (vic = 0, i = 1; i < ARRAY_SIZE(cea_modes); i++) {
-				if (cea_modes[i].xres == m->mode.xres &&
-				    cea_modes[i].yres == m->mode.yres &&
-				    cea_modes[i].vmode == m->mode.vmode &&
-				    cea_modes[i].refresh == m->mode.refresh) {
-					vic_support[i] = 1;
-					vic = i;
-					break;
-				}
-			}
+			vic = vic_from_videomode(&m->mode, FB_VMODE_MASK);
+
+			if (vic)
+				vic_support[vic] = 1;
 
 			if (!dflt && (m->mode.flag & FB_MODE_IS_FIRST))
 				dflt = &m->mode;
diff --git a/drivers/video/sunxi/disp/disp_hdmi.c b/drivers/video/sunxi/disp/disp_hdmi.c
index 01e06f3..c29afa5 100644
--- a/drivers/video/sunxi/disp/disp_hdmi.c
+++ b/drivers/video/sunxi/disp/disp_hdmi.c
@@ -206,6 +206,25 @@ static __u32 fb_videomode_pixclock_to_hdmi_pclk(__u32 pixclock)
 	return pclk * 50000;
 }
 
+int vic_from_videomode(const struct fb_videomode *mode, unsigned vmode_mask)
+{
+	int vic;
+	unsigned rfsh_limit;
+
+	for (vic = 1; vic < ARRAY_SIZE(cea_modes); vic++) {
+		/* allow 59 to match 60 and 23 to match 24 */
+		rfsh_limit = (cea_modes[vic].refresh == 24 || cea_modes[vic].refresh == 60) ? 1 : 0;
+
+		if (cea_modes[vic].xres == mode->xres && cea_modes[vic].yres == mode->yres &&
+		    (unsigned)(cea_modes[vic].refresh - mode->refresh) <= rfsh_limit &&
+		    ((cea_modes[vic].vmode ^ mode->vmode) & vmode_mask) == 0) {
+			return vic;
+		}
+	}
+
+	return 0;
+}
+
 void videomode_to_video_timing(struct __disp_video_timing *video_timing,
 		const struct fb_videomode *mode)
 {
@@ -214,15 +233,14 @@ void videomode_to_video_timing(struct __disp_video_timing *video_timing,
 		int pclk;
 	} pclk_override[] = {
 		/*  VIC        PCLK  AVI_PR INPUTX INPUTY HT   HBP  HFP  HPSW  VT  VBP VFP VPSW I  HS VS   override */
-		{ { 511, 146250000, 0, 1680, 1050, 2240, 456, 104, 176, 1089, 36,  3, 6,  0, 0, 1 }, 146000000 },
-		{ { 511,  83500000, 0, 1280,  800, 1680, 328,  72, 128,  831, 28,  3, 6,  0, 0, 1 },  83250000 },
-		{ { 511,  83500000, 0, 1280,  800, 1680, 328,  72, 128,  831, 21, 10, 6,  0, 1, 1 },  83250000 },
+		{ { 0, 146250000, 0, 1680, 1050, 2240, 456, 104, 176, 1089, 36,  3, 6,  0, 0, 1 }, 146000000 },
+		{ { 0,  83500000, 0, 1280,  800, 1680, 328,  72, 128,  831, 28,  3, 6,  0, 0, 1 },  83250000 },
+		{ { 0,  83500000, 0, 1280,  800, 1680, 328,  72, 128,  831, 21, 10, 6,  0, 1, 1 },  83250000 },
 	};
 
 	int i;
 
 	memset(video_timing, 0, sizeof(struct __disp_video_timing));
-	video_timing->VIC = 511;
 	video_timing->PCLK =
 		fb_videomode_pixclock_to_hdmi_pclk(mode->pixclock);
 	video_timing->AVI_PR = 0;
@@ -248,6 +266,9 @@ void videomode_to_video_timing(struct __disp_video_timing *video_timing,
 
 		if ((video_timing->HT * (video_timing->VT + 1) * (mode->refresh/2)) == video_timing->PCLK)
 			video_timing->VT++;
+
+		if (mode->xres == 720 && (mode->yres == 576 || mode->yres == 480))
+			video_timing->AVI_PR = 1;
 	}
 
 	if (mode->sync & FB_SYNC_HOR_HIGH_ACT)
@@ -262,6 +283,8 @@ void videomode_to_video_timing(struct __disp_video_timing *video_timing,
 			break;
 		}
 	}
+
+	video_timing->VIC = vic_from_videomode(mode, FB_VMODE_MASK);
 }
 
 __s32 BSP_disp_set_videomode(__u32 sel, const struct fb_videomode *mode)
diff --git a/drivers/video/sunxi/disp/disp_hdmi.h b/drivers/video/sunxi/disp/disp_hdmi.h
index cbc5e14..ab77bcc 100644
--- a/drivers/video/sunxi/disp/disp_hdmi.h
+++ b/drivers/video/sunxi/disp/disp_hdmi.h
@@ -23,5 +23,6 @@
 __s32 Display_Hdmi_Init(void);
 __s32 Display_Hdmi_Exit(void);
 void videomode_to_video_timing(struct __disp_video_timing *video_timing, const struct fb_videomode *mode);
+int vic_from_videomode(const struct fb_videomode *mode, unsigned vmode_mask);
 
 #endif
diff --git a/drivers/video/sunxi/hdmi/hdmi_core.c b/drivers/video/sunxi/hdmi/hdmi_core.c
index ce2efed..223bac1 100644
--- a/drivers/video/sunxi/hdmi/hdmi_core.c
+++ b/drivers/video/sunxi/hdmi/hdmi_core.c
@@ -63,7 +63,7 @@ struct __disp_video_timing video_timing[] = {
 	{ HDMI720P_60_3D_FP,  148500000,  0,  1280, 1440, 1650, 260, 110, 40,  750, 25,  5,  5, 0,  1,  1 },
 	{ HDMI1360_768_60,     85500000,  0,  1360,  768, 1792, 368, 64, 112,  795, 24,  3,  6, 0,  1,  1 },
 	{ HDMI1280_1024_60,   108000000,  0,  1280, 1024, 1688, 360, 48, 112, 1066, 41,  1,  3, 0,  1,  1 },
-	{ HDMI_EDID, } /* Entry reserved for EDID detected preferred timing */
+	{ 0 } /* Entry reserved for EDID detected preferred timing */
 };
 
 const int video_timing_edid = ARRAY_SIZE(video_timing) - 1;
@@ -219,7 +219,10 @@ __s32 get_video_info(__s32 vic)
 {
 	__s32 i;
 
-	for (i = 0; i < ARRAY_SIZE(video_timing); i++)
+	if (vic == HDMI_EDID)
+		return video_timing_edid;
+	
+	for (i = 0; i < video_timing_edid; i++)
 		if (vic == video_timing[i].VIC)
 			return i;
 
@@ -227,25 +230,6 @@ __s32 get_video_info(__s32 vic)
 	return -1;
 }
 
-__s32 vic_from_video_timing(const struct __disp_video_timing *mode)
-{
-	__s32 i;
-	struct __disp_video_timing temp_mode;
-	
-	memcpy(&temp_mode, mode, sizeof(temp_mode));
-
-	for (i = 0; i < ARRAY_SIZE(video_timing); i++)
-	{
-	      temp_mode.VIC = video_timing[i].VIC;
-	      
-	      if (memcmp(&temp_mode, &video_timing[i], sizeof(temp_mode)) == 0)
-			return video_timing[i].VIC;
-	}
-	
-	return HDMI_EDID;
-}
-
-
 static __s32 get_audio_info(__s32 sample_rate)
 {
 	__s32 vic_tab;
@@ -310,19 +294,17 @@ static __s32 get_audio_info(__s32 sample_rate)
 
 __s32 video_config(__s32 vic)
 {
-
 	__s32 vic_tab, clk_div, reg_val, dw = 0;
+	const struct __disp_video_timing *timing;
 
-	__inf("video_config, vic:%d\n", vic);
+	__inf("video_config, video_mode:%d\n", vic);
 
 	vic_tab = get_video_info(vic);
 	if (vic_tab == -1)
 		return 0;
-	else
-		video_mode = vic;
-	
-	if (vic == HDMI_EDID)
-		vic = vic_from_video_timing(&video_timing[video_timing_edid]);
+
+	timing = &video_timing[vic_tab];
+	vic = timing->VIC;
 
 	if ((vic == HDMI1440_480I) || (vic == HDMI1440_576I))
 		dw = 1; /* Double Width */
@@ -336,42 +318,39 @@ __s32 video_config(__s32 vic)
 	reg_val = 0x00000000;
 	if (dw)
 		reg_val |= 0x00000001; /* repetition */
-	if (video_timing[vic_tab].I)
+	if (timing->I)
 		reg_val |= 0x00000010; /* interlace */
 	writel(reg_val, HDMI_VIDEO_CTRL);
 
 	/* active H */
-	writew((video_timing[vic_tab].INPUTX << dw) - 1, HDMI_VIDEO_H);
+	writew((timing->INPUTX << dw) - 1, HDMI_VIDEO_H);
 	/* active HBP */
-	writew((video_timing[vic_tab].HBP << dw) - 1, HDMI_VIDEO_HBP);
+	writew((timing->HBP << dw) - 1, HDMI_VIDEO_HBP);
 	/* active HFP */
-	writew((video_timing[vic_tab].HFP << dw) - 1, HDMI_VIDEO_HFP);
+	writew((timing->HFP << dw) - 1, HDMI_VIDEO_HFP);
 	/* active HSPW */
-	writew((video_timing[vic_tab].HPSW << dw) - 1, HDMI_VIDEO_HSPW);
+	writew((timing->HPSW << dw) - 1, HDMI_VIDEO_HSPW);
 
 	/* set active V */
 	if ((vic == HDMI1080P_24_3D_FP) || (vic == HDMI720P_50_3D_FP) ||
 	    (vic == HDMI720P_60_3D_FP))
-		writew(video_timing[vic_tab].INPUTY +
-			     video_timing[vic_tab].VBP +
-			     video_timing[vic_tab].VFP - 1,
-			     HDMI_VIDEO_V);
-	else if (video_timing[vic_tab].I)
-		writew((video_timing[vic_tab].INPUTY / 2) - 1, HDMI_VIDEO_V);
+		writew(timing->INPUTY + timing->VBP + timing->VFP - 1, HDMI_VIDEO_V);
+	else if (timing->I)
+		writew((timing->INPUTY / 2) - 1, HDMI_VIDEO_V);
 	else
-		writew(video_timing[vic_tab].INPUTY - 1, HDMI_VIDEO_V);
+		writew(timing->INPUTY - 1, HDMI_VIDEO_V);
 
 	/* active VBP */
-	writew(video_timing[vic_tab].VBP - 1, HDMI_VIDEO_VBP);
+	writew(timing->VBP - 1, HDMI_VIDEO_VBP);
 	/* active VFP */
-	writew(video_timing[vic_tab].VFP - 1, HDMI_VIDEO_VFP);
+	writew(timing->VFP - 1, HDMI_VIDEO_VFP);
 	/* active VSPW */
-	writew(video_timing[vic_tab].VPSW - 1, HDMI_VIDEO_VPSW);
+	writew(timing->VPSW - 1, HDMI_VIDEO_VPSW);
 
 	reg_val = 0;
-	if (video_timing[vic_tab].HSYNC)
+	if (timing->HSYNC)
 		reg_val |= 0x01; /* Positive Hsync */
-	if (video_timing[vic_tab].VSYNC)
+	if (timing->VSYNC)
 		reg_val |= 0x02; /* Positive Vsync */
 	writew(reg_val, HDMI_VIDEO_POLARITY);
 
@@ -387,12 +366,12 @@ __s32 video_config(__s32 vic)
 #else
 	writeb(0x12, HDMI_AVI_INFOFRAME + 4); /* Data Byte 1: RGB */
 #endif
-	if (video_timing[vic_tab].PCLK <= 27000000)
+	if (timing->PCLK <= 27000000)
 		reg_val = 0x40;  /* SD-modes, assume ITU601 colorspace */
 	else
 		reg_val = 0x80;  /* HD-modes, assume ITU709 colorspace */
-	if (video_timing[vic_tab].INPUTX * 100 /
-			video_timing[vic_tab].INPUTY < 156)
+	if (timing->INPUTX * 100 /
+			timing->INPUTY < 156)
 		reg_val |= 0x18; /* 4 : 3 */
 	else
 		reg_val |= 0x28; /* 16 : 9 */
@@ -402,10 +381,10 @@ __s32 video_config(__s32 vic)
 #else
 	writeb(0x88, HDMI_AVI_INFOFRAME + 6);
 #endif
-	writeb((video_timing[vic_tab].VIC >= HDMI_NON_CEA861D_START) ?
-			   0 : video_timing[vic_tab].VIC,
+	writeb((timing->VIC >= HDMI_NON_CEA861D_START) ?
+			   0 : timing->VIC,
 			   HDMI_AVI_INFOFRAME + 7);
-	writeb(video_timing[vic_tab].AVI_PR, HDMI_AVI_INFOFRAME + 8);
+	writeb(timing->AVI_PR, HDMI_AVI_INFOFRAME + 8);
 	writeb(0x00, HDMI_AVI_INFOFRAME + 9);
 	writeb(0x00, HDMI_AVI_INFOFRAME + 10);
 	writeb(0x00, HDMI_AVI_INFOFRAME + 11);
@@ -492,10 +471,10 @@ __s32 video_config(__s32 vic)
 
 	/* hdmi pll setting */
 	if ((vic == HDMI1440_480I) || (vic == HDMI1440_576I)) {
-		clk_div = hdmi_clk / video_timing[vic_tab].PCLK;
+		clk_div = hdmi_clk / timing->PCLK;
 		clk_div /= 2;
 	} else {
-		clk_div = hdmi_clk / video_timing[vic_tab].PCLK;
+		clk_div = hdmi_clk / timing->PCLK;
 	}
 	clk_div &= 0x0f;
 
diff --git a/drivers/video/sunxi/hdmi/hdmi_edid.c b/drivers/video/sunxi/hdmi/hdmi_edid.c
index 1f6d278..9ed9eec 100644
--- a/drivers/video/sunxi/hdmi/hdmi_edid.c
+++ b/drivers/video/sunxi/hdmi/hdmi_edid.c
@@ -19,12 +19,18 @@
 
 #include <sound/pcm.h>
 #include <linux/fb.h>
+#include <linux/crc32.h>
 #include "hdmi_core.h"
 #include "../disp/dev_disp.h"
 #include "../disp/disp_hdmi.h"
 #include "../disp/sunxi_disp_regs.h"
 #include "hdmi_cec.h"
 
+#define EDID_BLOCK_LENGTH	0x80
+#define EDID_MAX_BLOCKS		2
+
+#define DDC_ADDR 		0x50
+#define DDC_RETRIES 		3
 
 /*
  * ParseEDID()
@@ -50,7 +56,7 @@ EDID_Header_Check(__u8 *pbuf)
 	if (pbuf[0] != 0x00 || pbuf[1] != 0xFF || pbuf[2] != 0xFF ||
 	    pbuf[3] != 0xFF || pbuf[4] != 0xFF || pbuf[5] != 0xFF ||
 	    pbuf[6] != 0xFF || pbuf[7] != 0x00) {
-		pr_info("EDID block0 header error\n");
+		pr_err("EDID block0 header error\n");
 		return -1;
 	}
 	return 0;
@@ -61,11 +67,11 @@ EDID_Version_Check(__u8 *pbuf)
 {
 	pr_info("EDID version: %d.%d\n", pbuf[0x12], pbuf[0x13]);
 	if (pbuf[0x12] != 0x01) {
-		pr_info("Unsupport EDID format,EDID parsing exit\n");
+		pr_err("Unsupport EDID format,EDID parsing exit\n");
 		return -1;
 	}
 	if (pbuf[0x13] < 3 && !(pbuf[0x18] & 0x02)) {
-		pr_info("EDID revision < 3 and preferred timing feature bit "
+		pr_err("EDID revision < 3 and preferred timing feature bit "
 			"not set, ignoring EDID info\n");
 		return -1;
 	}
@@ -75,39 +81,38 @@ EDID_Version_Check(__u8 *pbuf)
 static __s32
 Parse_AudioData_Block(__u8 *pbuf, __u8 size)
 {
-	__u8 sum = 0;
 	unsigned long rates = 0;
 
-	while (sum < size) {
-		if ((pbuf[sum] & 0xf8) == 0x08) {
-			int c = (pbuf[sum] & 0x7) + 1;
-			pr_info("Parse_AudioData_Block: max channel=%d\n", c);
-			pr_info("Parse_AudioData_Block: SampleRate code=%x\n",
-			      pbuf[sum + 1]);
-			pr_info("Parse_AudioData_Block: WordLen code=%x\n",
-			      pbuf[sum + 2]);
+	while (size >= 3) {
+		if ((pbuf[0] & 0xf8) == 0x08) {
+			int c = (pbuf[0] & 0x7) + 1;
+			pr_info("Audio block:\n");
+			pr_info("  Channels=%d\n", c);
+			pr_info("  SampleRate code=%x\n", pbuf[1]);
+			pr_info("  WordLen code=%x\n", pbuf[2]);
 			/*
 			 * If >= 2 channels and 16 bit is supported, then
 			 * add the supported rates to our bitmap.
 			 */
-			if ((c >= 2) && (pbuf[sum + 2] & 0x01)) {
-				if (pbuf[sum + 1] & 0x01)
+			if ((c >= 2) && (pbuf[2] & 0x01)) {
+				if (pbuf[1] & 0x01)
 					rates |= SNDRV_PCM_RATE_32000;
-				if (pbuf[sum + 1] & 0x02)
+				if (pbuf[1] & 0x02)
 					rates |= SNDRV_PCM_RATE_44100;
-				if (pbuf[sum + 1] & 0x04)
+				if (pbuf[1] & 0x04)
 					rates |= SNDRV_PCM_RATE_48000;
-				if (pbuf[sum + 1] & 0x08)
+				if (pbuf[1] & 0x08)
 					rates |= SNDRV_PCM_RATE_88200;
-				if (pbuf[sum + 1] & 0x10)
+				if (pbuf[1] & 0x10)
 					rates |= SNDRV_PCM_RATE_96000;
-				if (pbuf[sum + 1] & 0x20)
+				if (pbuf[1] & 0x20)
 					rates |= SNDRV_PCM_RATE_176400;
-				if (pbuf[sum + 1] & 0x40)
+				if (pbuf[1] & 0x40)
 					rates |= SNDRV_PCM_RATE_192000;
 			}
 		}
-		sum += 3;
+		pbuf += 3;
+		size -= 3;
 	}
 	audio_info.supported_rates |= rates;
 	return 0;
@@ -120,7 +125,7 @@ Parse_HDMI_VSDB(__u8 *pbuf, __u8 size)
 
 	/* check if it's HDMI VSDB */
 	if ((pbuf[0] == 0x03) && (pbuf[1] == 0x0c) && (pbuf[2] == 0x00))
-		pr_info("Find HDMI Vendor Specific DataBlock\n");
+		pr_info("Found HDMI Vendor Specific DataBlock\n");
 	else
 		return 0;
 
@@ -141,49 +146,52 @@ Parse_HDMI_VSDB(__u8 *pbuf, __u8 size)
 		Device_Support_VIC[HDMI1080P_24_3D_FP] = 1;
 		Device_Support_VIC[HDMI720P_50_3D_FP] = 1;
 		Device_Support_VIC[HDMI720P_60_3D_FP] = 1;
-		pr_info("3D_present\n");
+		pr_info("  3D_present\n");
 	} else {
 		return 0;
 	}
 
 	if (((pbuf[index] & 0x60) == 1) || ((pbuf[index] & 0x60) == 2))
-		pr_info("3D_multi_present\n");
+		pr_info("  3D_multi_present\n");
 
 	index += (pbuf[index + 1] & 0xe0) + 2;
 	if (index > (size + 1))
 		return 0;
 
-	__inf("3D_multi_present byte(%2.2x,%2.2x)\n", pbuf[index],
+	pr_info("  3D_multi_present byte(%2.2x,%2.2x)\n", pbuf[index],
 	      pbuf[index + 1]);
 
 	return 0;
 }
 
-static __s32 ParseEDID_CEA861_extension_block(__u32 i, __u8 *EDID_Buf)
+static __s32 ParseEDID_CEA861_extension_block(__u8 *EDID_Block)
 {
 	__u32 offset;
-	if (EDID_Buf[0x80 * i + 3] & 0x40) {
+
+	if (EDID_Block[3] & 0x40) {
 		audio_info.supported_rates |=
 			SNDRV_PCM_RATE_32000 |
 			SNDRV_PCM_RATE_44100 |
 			SNDRV_PCM_RATE_48000;
 	}
-	offset = EDID_Buf[0x80 * i + 2];
+
+	offset = EDID_Block[2];
 	/* deal with reserved data block */
 	if (offset > 4)	{
 		__u8 bsum = 4;
 		while (bsum < offset) {
-			__u8 tag = EDID_Buf[0x80 * i + bsum] >> 5;
-			__u8 len = EDID_Buf[0x80 * i + bsum] & 0x1f;
+			__u8 tag = EDID_Block[bsum] >> 5;
+			__u8 len = EDID_Block[bsum] & 0x1f;
+
 			if ((len > 0) && ((bsum + len + 1) > offset)) {
-				pr_info("len or bsum size error\n");
+				pr_err("%s: len or bsum size error\n", __func__);
 				return 0;
-			} else {
-				if (tag == 1) { /* ADB */
-					Parse_AudioData_Block(EDID_Buf + 0x80 * i + bsum + 1, len);
-				} else if (tag == 3) { /* vendor specific */
-					Parse_HDMI_VSDB(EDID_Buf + 0x80 * i + bsum + 1, len);
-				}
+			} 
+
+			if (tag == 1) { /* ADB */
+				Parse_AudioData_Block(EDID_Block + bsum + 1, len);
+			} else if (tag == 3) { /* vendor specific */
+				Parse_HDMI_VSDB(EDID_Block + bsum + 1, len);
 			}
 
 			bsum += (len + 1);
@@ -193,13 +201,10 @@ static __s32 ParseEDID_CEA861_extension_block(__u32 i, __u8 *EDID_Buf)
 	return 1;
 }
 
-#define DDC_ADDR 0x50
-#define EDID_LENGTH 0x80
-#define TRIES 3
 static int probe_ddc_edid(struct i2c_adapter *adapter,
 		int block, unsigned char *buf)
 {
-	unsigned char start = block * EDID_LENGTH;
+	unsigned char start = block * EDID_BLOCK_LENGTH;
 	struct i2c_msg msgs[] = {
 		{
 			.addr	= DDC_ADDR,
@@ -209,16 +214,14 @@ static int probe_ddc_edid(struct i2c_adapter *adapter,
 		}, {
 			.addr	= DDC_ADDR,
 			.flags	= I2C_M_RD,
-			.len	= EDID_LENGTH,
+			.len	= EDID_BLOCK_LENGTH,
 			.buf	= buf + start,
 		}
 	};
 
-	if (!buf) {
-		dev_warn(&adapter->dev, "unable to allocate memory for EDID "
-			 "block.\n");
+	/* !!! only 1 byte I2C address length used */
+	if (block >= 2)
 		return -EIO;
-	}
 
 	if (i2c_transfer(adapter, msgs, 2) == 2)
 		return 0;
@@ -230,47 +233,39 @@ static int get_edid_block(int block, unsigned char *buf)
 {
 	int i;
 
-	for (i = 1; i <= TRIES; i++) {
+	for (i = 1; i <= DDC_RETRIES; i++) {
 		if (probe_ddc_edid(&sunxi_hdmi_i2c_adapter, block, buf)) {
 			dev_warn(&sunxi_hdmi_i2c_adapter.dev,
 				 "unable to read EDID block %d, try %d/%d\n",
-				 block, i, TRIES);
+				 block, i, DDC_RETRIES);
 			continue;
 		}
 		if (EDID_CheckSum(block, buf) != 0) {
 			dev_warn(&sunxi_hdmi_i2c_adapter.dev,
 				 "EDID block %d checksum error, try %d/%d\n",
-				 block, i, TRIES);
+				 block, i, DDC_RETRIES);
 			continue;
 		}
 		break;
 	}
-	return (i <= TRIES) ? 0 : -EIO;
+	return (i <= DDC_RETRIES) ? 0 : -EIO;
 }
 
 /*
  * collect the EDID ucdata of segment 0
  */
-#define EDID_MAX_BLOCKS		5
 __s32 ParseEDID(void)
 {
 	__u8 BlockCount;
-	__u32 i;
+	__u32 i, crc_val;
+	static __u32 EDID_crc = 0;
 	const struct fb_videomode *dfltMode;
-	unsigned char *EDID_Buf = kmalloc(EDID_LENGTH*EDID_MAX_BLOCKS, GFP_KERNEL);
+	unsigned char *EDID_Buf = kmalloc(EDID_BLOCK_LENGTH * EDID_MAX_BLOCKS, GFP_KERNEL);
+
 	if (!EDID_Buf)
 		return -ENOMEM;
 
-	pr_info("ParseEDID\n");
-
-	if (video_mode == HDMI_EDID) {
-		/* HDMI_DEVICE_SUPPORT_VIC_SIZE - 1 so as to not overwrite
-		   the currently in use timings with a new preferred mode! */
-		memset(Device_Support_VIC, 0,
-		       HDMI_DEVICE_SUPPORT_VIC_SIZE - 1);
-	} else {
-		memset(Device_Support_VIC, 0, HDMI_DEVICE_SUPPORT_VIC_SIZE);
-	}
+	__inf("ParseEDID\n");
 
 	if (get_edid_block(0, EDID_Buf) != 0)
 		goto ret;
@@ -290,17 +285,36 @@ __s32 ParseEDID(void)
 			BlockCount = i;
 			break;
 		}
+	}
+
+	crc_val = crc32(-1U, EDID_Buf, EDID_BLOCK_LENGTH * BlockCount);
+
+	if (crc_val != EDID_crc || !Device_Support_VIC[HDMI_EDID]) {
+		EDID_crc = crc_val;
 
-		if (EDID_Buf[0x80 * i + 0] == 2) {
-			ParseEDID_CEA861_extension_block(i, EDID_Buf);
+		pr_info("ParseEDID: New EDID received.\n");
+
+		if (video_mode == HDMI_EDID) {
+			/* HDMI_DEVICE_SUPPORT_VIC_SIZE - 1 so as to not overwrite
+			  the currently in use timings with a new preferred mode! */
+			memset(Device_Support_VIC, 0, HDMI_DEVICE_SUPPORT_VIC_SIZE - 1);
+		} else {
+			memset(Device_Support_VIC, 0, HDMI_DEVICE_SUPPORT_VIC_SIZE);
 		}
-	}
 
-	dfltMode = hdmi_edid_received(EDID_Buf, BlockCount, Device_Support_VIC);
+		for (i = 1; i < BlockCount; i++) {
+			if (EDID_Buf[EDID_BLOCK_LENGTH * i + 0] == 2)
+				ParseEDID_CEA861_extension_block(EDID_Buf + EDID_BLOCK_LENGTH * i);
+		}
+
+		dfltMode = hdmi_edid_received(EDID_Buf, BlockCount, Device_Support_VIC);
 
-	if (!Device_Support_VIC[HDMI_EDID] && dfltMode) {
-		videomode_to_video_timing(&video_timing[video_timing_edid], dfltMode);
-		Device_Support_VIC[HDMI_EDID] = 1;
+		if (dfltMode) {
+			videomode_to_video_timing(&video_timing[video_timing_edid], dfltMode);
+			Device_Support_VIC[HDMI_EDID] = 1;
+		}
+	} else {
+		pr_info("ParseEDID: EDID already known.\n");
 	}
 
 ret:

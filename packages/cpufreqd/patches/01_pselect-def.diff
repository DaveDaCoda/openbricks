--- cpufreqd-2.0.0.old/src/main.c	2005-11-23 20:53:08.000000000 +0100
+++ cpufreqd-2.0.0/src/main.c	2005-12-08 16:28:04.000000000 +0100
@@ -79,6 +79,41 @@
 static int cpufreqd_mode = ARG_DYNAMIC; /* operation mode (manual / dynamic) */
 
 /*
+ * From glibc
+ */
+int
+pselect (int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
+		const struct timespec *timeout, const sigset_t *sigmask)
+{
+	struct timeval tval;
+	int retval;
+	sigset_t savemask;
+
+	/* Change nanosecond number to microseconds.  This might mean losing
+	 *      precision and therefore the `pselect` should be available.  But
+	 *           for now it is hardly found.  */
+	if (timeout != NULL)
+		TIMESPEC_TO_TIMEVAL (&tval, timeout);
+
+	/* The setting and restoring of the signal mask and the select call
+	 *      should be an atomic operation.  This can't be done without kernel
+	 *           help.  */
+	if (sigmask != NULL)
+		sigprocmask (SIG_SETMASK, sigmask, &savemask);
+
+	/* Note the pselect() is a cancellation point.  But since we call
+	 *      select() which itself is a cancellation point we do not have
+	 *           to do anything here.  */
+	retval = select (nfds, readfds, writefds, exceptfds,
+			timeout != NULL ? &tval : NULL);
+
+	if (sigmask != NULL)
+		sigprocmask (SIG_SETMASK, &savemask, NULL);
+
+	return retval;
+}
+
+/*
  * Evaluates the full rule and returns the percentage score
  * for it.
  */

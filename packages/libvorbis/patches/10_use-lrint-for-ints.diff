* use lrint() whenever the left-value is integer
this allows the compliation to use lrint() inlined math macros

without this patch, gcc 4.1.0 optimize rint() calls into lrint()
but, we dont have function of lrint(), just inlined math macro.

diff -Nur libvorbis-1.1.2.orig/lib/bitrate.c libvorbis-1.1.2/lib/bitrate.c
--- libvorbis-1.1.2.orig/lib/bitrate.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/bitrate.c	Fri Mar 24 15:13:45 2006
@@ -39,9 +39,9 @@
     bm->short_per_long=ci->blocksizes[1]/ci->blocksizes[0];
     bm->managed=1;
 
-    bm->avg_bitsper= rint(1.*bi->avg_rate*halfsamples/ratesamples);
-    bm->min_bitsper= rint(1.*bi->min_rate*halfsamples/ratesamples);
-    bm->max_bitsper= rint(1.*bi->max_rate*halfsamples/ratesamples);
+    bm->avg_bitsper= lrint(1.*bi->avg_rate*halfsamples/ratesamples);
+    bm->min_bitsper= lrint(1.*bi->min_rate*halfsamples/ratesamples);
+    bm->max_bitsper= lrint(1.*bi->max_rate*halfsamples/ratesamples);
     
     bm->avgfloat=PACKETBLOBS/2;    
 
@@ -80,7 +80,7 @@
   codec_setup_info      *ci=vi->codec_setup;
   bitrate_manager_info  *bi=&ci->bi;
 
-  int  choice=rint(bm->avgfloat);
+  int  choice=lrint(bm->avgfloat);
   long this_bits=oggpack_bytes(vbi->packetblob[choice])*8;
   long min_target_bits=(vb->W?bm->min_bitsper*bm->short_per_long:bm->min_bitsper);
   long max_target_bits=(vb->W?bm->max_bitsper*bm->short_per_long:bm->max_bitsper);
@@ -132,7 +132,7 @@
     slew=rint(choice-bm->avgfloat)/samples*vi->rate;
     if(slew<-slewlimit)slew=-slewlimit;
     if(slew>slewlimit)slew=slewlimit;
-    choice=rint(bm->avgfloat+= slew/vi->rate*samples);
+    choice=lrint(bm->avgfloat+= slew/vi->rate*samples);
     this_bits=oggpack_bytes(vbi->packetblob[choice])*8;
   }
 
diff -Nur libvorbis-1.1.2.orig/lib/floor1.c libvorbis-1.1.2/lib/floor1.c
--- libvorbis-1.1.2.orig/lib/floor1.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/floor1.c	Fri Mar 24 15:09:59 2006
@@ -506,8 +506,8 @@
     double denom=1./(an*fx2-fx*fx);
     double a=(fy*fx2-fxy*fx)*denom;
     double b=(an*fxy-fx*fy)*denom;
-    *y0=rint(a+b*x0);
-    *y1=rint(a+b*x1);
+    *y0=lrint(a+b*x0);
+    *y1=lrint(a+b*x1);
     
     /* limit to our range! */
     if(*y0>1023)*y0=1023;
diff -Nur libvorbis-1.1.2.orig/lib/lsp.c libvorbis-1.1.2/lib/lsp.c
--- libvorbis-1.1.2.orig/lib/lsp.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/lsp.c	Fri Mar 24 15:12:55 2006
@@ -143,8 +143,8 @@
 
   /* set up for using all int later */
   int i;
-  int ampoffseti=rint(ampoffset*4096.f);
-  int ampi=rint(amp*16.f);
+  int ampoffseti=lrint(ampoffset*4096.f);
+  int ampi=lrint(amp*16.f);
   long *ilsp=alloca(m*sizeof(*ilsp));
   for(i=0;i<m;i++)ilsp[i]=vorbis_coslook_i(lsp[i]/M_PI*65536.f+.5f);
 
diff -Nur libvorbis-1.1.2.orig/lib/mdct.c libvorbis-1.1.2/lib/mdct.c
--- libvorbis-1.1.2.orig/lib/mdct.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/mdct.c	Fri Mar 24 15:12:15 2006
@@ -55,7 +55,7 @@
   
   int i;
   int n2=n>>1;
-  int log2n=lookup->log2n=rint(log((float)n)/log(2.f));
+  int log2n=lookup->log2n=lrint(log((float)n)/log(2.f));
   lookup->n=n;
   lookup->trig=T;
   lookup->bitrev=bitrev;
diff -Nur libvorbis-1.1.2.orig/lib/psy.c libvorbis-1.1.2/lib/psy.c
--- libvorbis-1.1.2.orig/lib/psy.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/psy.c	Fri Mar 24 15:09:27 2006
@@ -271,7 +271,7 @@
   memset(p,0,sizeof(*p));
 
   p->eighth_octave_lines=gi->eighth_octave_lines;
-  p->shiftoc=rint(log(gi->eighth_octave_lines*8.f)/log(2.f))-1;
+  p->shiftoc=lrint(log(gi->eighth_octave_lines*8.f)/log(2.f))-1;
 
   p->firstoc=toOC(.25f*rate*.5/n)*(1<<(p->shiftoc+1))-gi->eighth_octave_lines;
   maxoc=toOC((n+.25f)*rate*.5/n)*(1<<(p->shiftoc+1))+.5f;
@@ -293,7 +293,7 @@
   /* set up the lookups for a given blocksize and sample rate */
 
   for(i=0,j=0;i<MAX_ATH-1;i++){
-    int endpos=rint(fromOC((i+1)*.125-2.)*2*n/rate);
+    int endpos=lrint(fromOC((i+1)*.125-2.)*2*n/rate);
     float base=ATH[i];
     if(j<endpos){
       float delta=(ATH[i+1]-base)/(endpos-j);
diff -Nur libvorbis-1.1.2.orig/lib/res0.c libvorbis-1.1.2/lib/res0.c
--- libvorbis-1.1.2.orig/lib/res0.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/res0.c	Fri Mar 24 15:11:43 2006
@@ -263,7 +263,7 @@
     }
   }
 
-  look->partvals=rint(pow((float)look->parts,(float)dim));
+  look->partvals=lrint(pow((float)look->parts,(float)dim));
   look->stages=maxstage;
   look->decodemap=_ogg_malloc(look->partvals*sizeof(*look->decodemap));
   for(j=0;j<look->partvals;j++){
diff -Nur libvorbis-1.1.2.orig/lib/sharedbook.c libvorbis-1.1.2/lib/sharedbook.c
--- libvorbis-1.1.2.orig/lib/sharedbook.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/sharedbook.c	Fri Mar 24 15:13:58 2006
@@ -53,7 +53,7 @@
     val= -val;
   }
   exp= floor(log(val)/log(2.f));
-  mant=rint(ldexp(val,(VQ_FMAN-1)-exp));
+  mant=lrint(ldexp(val,(VQ_FMAN-1)-exp));
   exp=(exp+VQ_FEXP_BIAS)<<VQ_FMAN;
 
   return(sign|exp|mant);
diff -Nur libvorbis-1.1.2.orig/lib/tone.c libvorbis-1.1.2/lib/tone.c
--- libvorbis-1.1.2.orig/lib/tone.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/tone.c	Fri Mar 24 15:10:33 2006
@@ -38,7 +38,7 @@
     int ival;
     for(j=0;j<argc-1;j++)
       val+=amp[j]*sin(i/44100.f*f[j]*2*M_PI);
-    ival=rint(val);
+    ival=lrint(val);
 
     if(ival>32767.f)ival=32767.f;
     if(ival<-32768.f)ival=-32768.f;
diff -Nur libvorbis-1.1.2.orig/lib/vorbisfile.c libvorbis-1.1.2/lib/vorbisfile.c
--- libvorbis-1.1.2.orig/lib/vorbisfile.c	Mon Nov 28 07:43:25 2005
+++ libvorbis-1.1.2/lib/vorbisfile.c	Fri Mar 24 15:12:35 2006
@@ -833,11 +833,11 @@
      * so this is slightly transformed to make it work.
      */
     br = bits/ov_time_total(vf,-1);
-    return(rint(br));
+    return(lrint(br));
   }else{
     if(vf->seekable){
       /* return the actual bitrate */
-      return(rint((vf->offsets[i+1]-vf->dataoffsets[i])*8/ov_time_total(vf,i)));
+      return(lrint((vf->offsets[i+1]-vf->dataoffsets[i])*8/ov_time_total(vf,i)));
     }else{
       /* return nominal if set */
       if(vf->vi[i].bitrate_nominal>0){

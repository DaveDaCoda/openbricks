* use lrint() whenever the left-value is integer
this allows the compliation to use lrint() inlined math macros

without this patch, gcc 4.1.0 optimize rint() calls into lrint()
but, we dont have function of lrint(), just inlined math macro.

use lrintf() whenever the argument is float
for the same reason.

diff -r 51494c531769 libavcodec/snow.c
--- a/libavcodec/snow.c	Sun Apr 30 16:52:40 2006 +0200
+++ b/libavcodec/snow.c	Sun Apr 30 16:54:28 2006 +0200
@@ -4006,7 +4006,7 @@ static int encode_frame(AVCodecContext *
     }
 
     if(pict->quality){
-        s->qlog= rint(QROOT*log(pict->quality / (float)FF_QP2LAMBDA)/log(2));
+        s->qlog= lrint(QROOT*log(pict->quality / (float)FF_QP2LAMBDA)/log(2));
         //<64 >60
         s->qlog += 61*QROOT/8;
     }else{
diff -r 51494c531769 libmpcodecs/vf_hue.c
--- a/libmpcodecs/vf_hue.c	Sun Apr 30 16:52:40 2006 +0200
+++ b/libmpcodecs/vf_hue.c	Sun Apr 30 16:54:28 2006 +0200
@@ -31,8 +31,8 @@ static void process_C(uint8_t *udst, uin
 		    int w, int h, float hue, float sat)
 {
 	int i;
-	const int s= rint(sin(hue) * (1<<16) * sat);
-	const int c= rint(cos(hue) * (1<<16) * sat);
+	const int s= lrint(sin(hue) * (1<<16) * sat);
+	const int c= lrint(cos(hue) * (1<<16) * sat);
 
 	while (h--) {
 		for (i = 0; i<w; i++)
@@ -110,10 +110,10 @@ static int control(struct vf_instance_s*
 	case VFCTRL_GET_EQUALIZER:
 		eq = data;
 		if (!strcmp(eq->item,"hue")) {
-			eq->value = rint(vf->priv->hue *100 / M_PI);
+			eq->value = lrint(vf->priv->hue *100 / M_PI);
 			return CONTROL_TRUE;
 		}else if (!strcmp(eq->item,"saturation")) {
-			eq->value = rint(vf->priv->saturation*100 - 100);
+			eq->value = lrintf(vf->priv->saturation*100 - 100);
 			return CONTROL_TRUE;
 		}
 		break;
diff -r 51494c531769 libvo/vo_dxr3.c
--- a/libvo/vo_dxr3.c	Sun Apr 30 16:52:40 2006 +0200
+++ b/libvo/vo_dxr3.c	Sun Apr 30 16:54:28 2006 +0200
@@ -1307,7 +1307,7 @@ static int col_interp(float x, struct co
 	y = 255;
     if(y < 0)
 	y = 0;
-    return rint(y);
+    return lrintf(y);
 }
 
 static int overlay_set_keycolor(overlay_t *o, int color) {

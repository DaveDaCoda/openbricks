--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h	2016-08-28 09:58:44.517648452 +0200
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.h	2016-08-28 10:16:37.317692266 +0200
@@ -298,10 +298,13 @@
 
 class CIMXCodec : public CThread
 {
-public:
   CIMXCodec();
   ~CIMXCodec();
 
+public:
+  static CIMXCodec      *getInstance();
+  static void           freeInstance(CIMXCodec *p);
+
   bool                  Open(CDVDStreamInfo &hints, CDVDCodecOptions &options, std::string &m_pFormatName, CProcessInfo *m_pProcessInfo);
   int                   Decode(BYTE *pData, int iSize, double dts, double pts);
 
@@ -321,6 +324,8 @@
 
   static void           ReleaseFramebuffer(VpuFrameBuffer* fb);
 
+  static const unsigned int m_renderQueueSize;
+
 protected:
   class VPUTask
   {
@@ -429,6 +434,9 @@
   bool                         IsCurrentThread() const;
 
   CCriticalSection             m_openLock;
+
+  static int                   m_refCount;
+  static CIMXCodec             *m_instance;
 };
 
 
@@ -440,12 +448,22 @@
 class CDVDVideoCodecIMX : public CDVDVideoCodec
 {
 public:
-  CDVDVideoCodecIMX(CProcessInfo &processInfo) : CDVDVideoCodec(processInfo), m_pFormatName("iMX-xxx") {}
-  virtual ~CDVDVideoCodecIMX();
+  CDVDVideoCodecIMX(CProcessInfo &processInfo) : CDVDVideoCodec(processInfo), m_IMXCodec(nullptr), m_pFormatName("iMX-xxx") {}
+  virtual ~CDVDVideoCodecIMX() { CIMXCodec::freeInstance(m_IMXCodec); }
 
   // Methods from CDVDVideoCodec which require overrides
-  virtual bool          Open(CDVDStreamInfo &hints, CDVDCodecOptions &options);
-  virtual bool          ClearPicture(DVDVideoPicture *pDvdVideoPicture);
+  virtual bool          Open(CDVDStreamInfo &hints, CDVDCodecOptions &options)
+  {
+    m_IMXCodec = CIMXCodec::getInstance();
+    return m_IMXCodec->Open(hints, options, m_pFormatName, &m_processInfo);
+  }
+
+  virtual bool          ClearPicture(DVDVideoPicture *pDvdVideoPicture)
+  {
+    if (pDvdVideoPicture)
+      SAFE_RELEASE(pDvdVideoPicture->IMXBuffer);
+    return true;
+  }
 
   virtual int           Decode(BYTE *pData, int iSize, double dts, double pts)  { return m_IMXCodec->Decode(pData, iSize, dts, pts); }
 
@@ -454,7 +472,7 @@
 
   virtual bool          GetPicture(DVDVideoPicture *pDvdVideoPicture)           { return m_IMXCodec->GetPicture(pDvdVideoPicture); }
   virtual void          SetDropState(bool bDrop)                                { m_IMXCodec->SetDropState(bDrop); }
-  virtual unsigned      GetAllowedReferences();
+  virtual unsigned      GetAllowedReferences()                                  { return CIMXCodec::m_renderQueueSize; }
 
   virtual bool          GetCodecStats(double &pts, int &droppedFrames, int &skippedPics) override
                                                                                 { return m_IMXCodec->GetCodecStats(pts, droppedFrames, skippedPics); }
@@ -462,7 +480,7 @@
   virtual void          SetSpeed(int iSpeed)                                    { m_IMXCodec->SetSpeed(iSpeed); }
 
 private:
-  std::shared_ptr<CIMXCodec> m_IMXCodec;
+  CIMXCodec             *m_IMXCodec;
 
   std::string           m_pFormatName;       // Current decoder format name
 };
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp	2016-08-28 09:58:46.333648526 +0200
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp	2016-08-28 10:19:19.469698889 +0200
@@ -63,47 +63,35 @@
 #endif
 
 CIMXContext   g_IMXContext;
-std::shared_ptr<CIMXCodec> g_IMXCodec;
 
 std::list<VpuFrameBuffer*> m_recycleBuffers;
 
+
 // Number of fb pages used for paning
 const int CIMXContext::m_fbPages = 3;
 
 // Experiments show that we need at least one more (+1) VPU buffer than the min value returned by the VPU
 const unsigned int CIMXCodec::m_extraVpuBuffers = 2 + CIMXContext::m_fbPages + RENDER_QUEUE_SIZE;
+const unsigned int CIMXCodec::m_renderQueueSize = RENDER_QUEUE_SIZE;
+int                CIMXCodec::m_refCount = 0;
+CIMXCodec          *CIMXCodec::m_instance = nullptr;
 
-CDVDVideoCodecIMX::~CDVDVideoCodecIMX()
+CIMXCodec *CIMXCodec::getInstance()
 {
-  m_IMXCodec.reset();
-  if (g_IMXCodec.use_count() == 1)
-    g_IMXCodec.reset();
-}
+  if (m_refCount == 0)
+    m_instance = new CIMXCodec;
 
-bool CDVDVideoCodecIMX::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options)
+  ++m_refCount;
+  return m_instance;
+}
+    
+void CIMXCodec::freeInstance(CIMXCodec *p)
 {
-  if (!g_IMXCodec)
+  if (p && p == m_instance && --m_refCount == 0)
   {
-    m_IMXCodec.reset(new CIMXCodec);
-    g_IMXCodec = m_IMXCodec;
+    m_instance = nullptr;
+    delete p;
   }
-  else
-    m_IMXCodec = g_IMXCodec;
-
-  return g_IMXCodec->Open(hints, options, m_pFormatName, &m_processInfo);
-}
-
-unsigned CDVDVideoCodecIMX::GetAllowedReferences()
-{
-  return RENDER_QUEUE_SIZE;
-}
-
-bool CDVDVideoCodecIMX::ClearPicture(DVDVideoPicture* pDvdVideoPicture)
-{
-  if (pDvdVideoPicture)
-    SAFE_RELEASE(pDvdVideoPicture->IMXBuffer);
-
-  return true;
 }
 
 bool CIMXCodec::VpuAllocBuffers(VpuMemInfo *pMemBlock)
@@ -493,7 +481,7 @@
   }
 #endif
 
-  if (m_hints != hints && g_IMXCodec->IsRunning())
+  if (m_hints != hints && IsRunning())
   {
     StopThread(false);
     ProcessSignals(SIGNAL_FLUSH);
@@ -743,7 +731,7 @@
     ptrn.Flush();
 
   int ret = 0;
-  if (!g_IMXCodec->IsRunning())
+  if (!IsRunning())
   {
     if ((!m_decInput.full() || !ptrn.Recalc()) && m_decInput.size() < 40)
     {
@@ -763,8 +751,8 @@
       m_decOpenParam.nMapType = 1;
 
       ptrn.Flush();
-      g_IMXCodec->Create();
-      g_IMXCodec->WaitStartup();
+      Create();
+      WaitStartup();
     }
   }
 
